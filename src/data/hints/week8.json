
{
    "week": 8,
    "problems": [
      {
        "id": "seasons",
        "name": "Seasons of Love",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "B·∫°n c·∫ßn t√≠nh s·ªë ph√∫t gi·ªØa ng√†y sinh v√† ng√†y h√¥m nay, sau ƒë√≥ chuy·ªÉn s·ªë ph√∫t ƒë√≥ th√†nh ch·ªØ.",
              "Th∆∞ vi·ªán `datetime` r·∫•t h·ªØu √≠ch ƒë·ªÉ l√†m vi·ªác v·ªõi ng√†y th√°ng. L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng `date` t·ª´ m·ªôt chu·ªói?",
              "L√†m th·∫ø n√†o ƒë·ªÉ t√≠nh to√°n s·ª± ch√™nh l·ªách gi·ªØa hai ng√†y?",
              "Th∆∞ vi·ªán `inflect` c√≥ th·ªÉ gi√∫p chuy·ªÉn ƒë·ªïi s·ªë th√†nh ch·ªØ. L√†m th·∫ø n√†o ƒë·ªÉ s·ª≠ d·ª•ng n√≥?",
              "B√†i to√°n c≈©ng y√™u c·∫ßu vi·∫øt unit test. B·∫°n c·∫ßn t·∫°o m·ªôt file test ri√™ng bi·ªát."
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. Nh·∫≠n ng√†y sinh t·ª´ ng∆∞·ªùi d√πng ·ªü ƒë·ªãnh d·∫°ng YYYY-MM-DD.",
              "2. S·ª≠ d·ª•ng `datetime.date.fromisoformat()` ƒë·ªÉ chuy·ªÉn chu·ªói th√†nh ƒë·ªëi t∆∞·ª£ng `date`.",
              "3. L·∫•y ng√†y h√¥m nay b·∫±ng `datetime.date.today()`.",
              "4. Tr·ª´ hai ng√†y ƒë·ªÉ c√≥ m·ªôt ƒë·ªëi t∆∞·ª£ng `timedelta`. L·∫•y t·ªïng s·ªë ng√†y t·ª´ `.days`.",
              "5. Chuy·ªÉn ƒë·ªïi s·ªë ng√†y th√†nh ph√∫t (ng√†y * 24 * 60).",
              "6. S·ª≠ d·ª•ng th∆∞ vi·ªán `inflect` ƒë·ªÉ chuy·ªÉn s·ªë ph√∫t th√†nh ch·ªØ: `p.number_to_words(minutes, andword=\"\")`.",
              "7. Vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu v√† in k·∫øt qu·∫£."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "from datetime import date\nimport inflect\nimport sys\n\ndef main():\n    try:\n        birth_date = date.fromisoformat(input(\"Date of Birth: \"))\n    except ValueError:\n        sys.exit(\"Invalid date\")\n\n    today = date.today()\n    delta = today - birth_date\n    minutes = delta.days * 24 * 60\n\n    p = inflect.engine()\n    words = p.number_to_words(minutes, andword=\"\").capitalize()\n    print(f\"{words} minutes\")\n\nif __name__ == \"__main__\":\n    main()"
          }
        }
      },
      {
        "id": "cookie",
        "name": "Cookie Jar",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "B√†i to√°n n√†y gi·ªõi thi·ªáu v·ªÅ L·∫≠p tr√¨nh H∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (OOP). B·∫°n c·∫ßn t·∫°o m·ªôt l·ªõp `Jar`.",
              "L·ªõp n√†y n√™n c√≥ nh·ªØng thu·ªôc t√≠nh (attributes) n√†o? (v√≠ d·ª•: dung t√≠ch, s·ªë l∆∞·ª£ng b√°nh hi·ªán t·∫°i).",
              "Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o `__init__` n√™n l√†m g√¨?",
              "C√°c ph∆∞∆°ng th·ª©c `deposit`, `withdraw`, `capacity`, `size` n√™n th·ª±c hi·ªán ch·ª©c nƒÉng g√¨ v√† tr·∫£ v·ªÅ gi√° tr·ªã g√¨?",
              "L√†m th·∫ø n√†o ƒë·ªÉ 'in' m·ªôt ƒë·ªëi t∆∞·ª£ng `Jar` ra m√†n h√¨nh d∆∞·ªõi d·∫°ng c√°c emoji b√°nh quy? H√£y xem x√©t ph∆∞∆°ng th·ª©c ƒë·∫∑c bi·ªát `__str__`."
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. ƒê·ªãnh nghƒ©a l·ªõp `class Jar:`.",
              "2. `__init__(self, capacity=12)`: Kh·ªüi t·∫°o `self.capacity` v√† `self.size = 0`. N√©m `ValueError` n·∫øu `capacity` kh√¥ng ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng.",
              "3. `@property capacity(self)` v√† `size(self)`: Tr·∫£ v·ªÅ c√°c gi√° tr·ªã t∆∞∆°ng ·ª©ng.",
              "4. `deposit(self, n)`: C·ªông `n` v√†o `self.size`. N√©m `ValueError` n·∫øu t·ªïng v∆∞·ª£t qu√° `self.capacity`.",
              "5. `withdraw(self, n)`: Tr·ª´ `n` kh·ªèi `self.size`. N√©m `ValueError` n·∫øu kh√¥ng ƒë·ªß b√°nh ƒë·ªÉ r√∫t.",
              "6. `__str__(self)`: Tr·∫£ v·ªÅ m·ªôt chu·ªói g·ªìm `self.size` l·∫ßn emoji 'üç™'."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "class Jar:\n    def __init__(self, capacity=12):\n        if not isinstance(capacity, int) or capacity < 0:\n            raise ValueError(\"Capacity must be a non-negative integer\")\n        self._capacity = capacity\n        self._size = 0\n\n    def __str__(self):\n        return \"üç™\" * self.size\n\n    def deposit(self, n):\n        if self.size + n > self.capacity:\n            raise ValueError(\"Too many cookies\")\n        self._size += n\n\n    def withdraw(self, n):\n        if self.size < n:\n            raise ValueError(\"Not enough cookies\")\n        self._size -= n\n\n    @property\n    def capacity(self):\n        return self._capacity\n\n    @property\n    def size(self):\n        return self._size"
          }
        }
      },
      {
        "id": "shirtificate",
        "name": "CS50 Shirtificate",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "B·∫°n c·∫ßn t·∫°o m·ªôt file PDF c√≥ h√¨nh ·∫£nh √°o thun v√† m·ªôt d√≤ng ch·ªØ t√πy ch·ªânh.",
              "Th∆∞ vi·ªán `fpdf2` l√† m·ªôt l·ª±a ch·ªçn t·ªët ƒë·ªÉ t·∫°o PDF trong Python.",
              "L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o m·ªôt trang PDF m·ªõi?",
              "L√†m th·∫ø n√†o ƒë·ªÉ th√™m m·ªôt h√¨nh ·∫£nh v√†o trang?",
              "L√†m th·∫ø n√†o ƒë·ªÉ thi·∫øt l·∫≠p font ch·ªØ, k√≠ch th∆∞·ªõc ch·ªØ, m√†u ch·ªØ v√† th√™m vƒÉn b·∫£n v√†o trang?",
              "L√†m th·∫ø n√†o ƒë·ªÉ cƒÉn gi·ªØa vƒÉn b·∫£n?"
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. Nh·∫≠n t√™n t·ª´ ng∆∞·ªùi d√πng.",
              "2. T·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng PDF: `pdf = FPDF(orientation=\"P\", unit=\"mm\", format=\"A4\")`.",
              "3. Th√™m m·ªôt trang m·ªõi: `pdf.add_page()`.",
              "4. Th√™m h√¨nh ·∫£nh √°o thun ·ªü ƒë·∫ßu trang, cƒÉn gi·ªØa: `pdf.image(\"shirtificate.png\", ...)`.",
              "5. Thi·∫øt l·∫≠p font v√† m√†u ch·ªØ cho ti√™u ƒë·ªÅ 'CS50 Shirtificate' v√† in n√≥ ra.",
              "6. Thi·∫øt l·∫≠p font v√† m√†u ch·ªØ cho t√™n ng∆∞·ªùi d√πng.",
              "7. Di chuy·ªÉn con tr·ªè ƒë·∫øn v·ªã tr√≠ th√≠ch h·ª£p tr√™n √°o v√† in ra t√™n ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c cƒÉn gi·ªØa.",
              "8. L∆∞u file PDF: `pdf.output(\"shirtificate.pdf\")`."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "from fpdf import FPDF\n\nclass PDF(FPDF):\n    def header(self):\n        self.set_font(\"helvetica\", \"B\", 36)\n        self.cell(0, 50, \"CS50 Shirtificate\", align=\"C\")\n        self.ln(20)\n\nname = input(\"Name: \")\n\npdf = PDF(orientation=\"P\", unit=\"mm\", format=\"A4\")\npdf.add_page()\npdf.image(\"shirtificate.png\", x=10, y=70, w=190)\n\npdf.set_font_size(24)\npdf.set_text_color(255, 255, 255) # White text\npdf.cell(0, -170, f\"{name} took CS50\", align=\"C\")\n\npdf.output(\"shirtificate.pdf\")"
          }
        }
      }
    ]
  }
  