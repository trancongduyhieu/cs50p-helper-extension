
{
    "week": 4,
    "problems": [
      {
        "id": "emojize",
        "name": "Emojize",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "B√†i to√°n y√™u c·∫ßu chuy·ªÉn ƒë·ªïi m·ªôt m√£ emoji (v√≠ d·ª•: ':thumbs_up:') th√†nh k√Ω t·ª± emoji th·ª±c s·ª± (üëç).",
              "Vi·ªác t·ª± t·∫°o m·ªôt t·ª´ ƒëi·ªÉn cho t·∫•t c·∫£ c√°c emoji l√† kh√¥ng kh·∫£ thi.",
              "C√≥ th∆∞ vi·ªán n√†o c·ªßa b√™n th·ª© ba c√≥ th·ªÉ gi√∫p b·∫°n th·ª±c hi·ªán vi·ªác n√†y kh√¥ng? H√£y t√¨m ki·∫øm tr√™n PyPI.",
              "Sau khi c√†i ƒë·∫∑t th∆∞ vi·ªán, l√†m th·∫ø n√†o ƒë·ªÉ b·∫°n import v√† s·ª≠ d·ª•ng h√†m ch√≠nh c·ªßa n√≥?"
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. C√†i ƒë·∫∑t th∆∞ vi·ªán `emoji` b·∫±ng pip: `pip install emoji`.",
              "2. Import th∆∞ vi·ªán v√†o script c·ªßa b·∫°n: `import emoji`.",
              "3. Nh·∫≠n chu·ªói ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng.",
              "4. G·ªçi h√†m `emoji.emojize()` v√† truy·ªÅn chu·ªói ƒë·∫ßu v√†o l√†m ƒë·ªëi s·ªë.",
              "5. In k·∫øt qu·∫£ tr·∫£ v·ªÅ t·ª´ h√†m."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "import emoji\n\n# Nh·∫≠n ƒë·∫ßu v√†o t·ª´ ng∆∞·ªùi d√πng\ntext = input(\"Input: \")\n\n# S·ª≠ d·ª•ng th∆∞ vi·ªán ƒë·ªÉ chuy·ªÉn ƒë·ªïi\nemojized_text = emoji.emojize(text, language='alias')\n\n# In k·∫øt qu·∫£\nprint(f\"Output: {emojized_text}\")"
          }
        }
      },
      {
        "id": "figlet",
        "name": "Frank, Ian and Glen's Letters",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "B·∫°n c·∫ßn t·∫°o ra vƒÉn b·∫£n ASCII art b·∫±ng m·ªôt font ch·ªØ c·ª• th·ªÉ ho·∫∑c m·ªôt font ng·∫´u nhi√™n.",
              "L√†m th·∫ø n√†o ƒë·ªÉ ch∆∞∆°ng tr√¨nh c·ªßa b·∫°n nh·∫≠n c√°c ƒë·ªëi s·ªë t·ª´ d√≤ng l·ªánh (command-line arguments)?",
              "Th∆∞ vi·ªán `pyfiglet` c√≥ th·ªÉ gi√∫p t·∫°o ASCII art. L√†m th·∫ø n√†o ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ c√°c font c√≥ s·∫µn?",
              "L√†m th·∫ø n√†o ƒë·ªÉ x·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p kh√°c nhau d·ª±a tr√™n s·ªë l∆∞·ª£ng ƒë·ªëi s·ªë d√≤ng l·ªánh?"
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt: `sys`, `random`, `pyfiglet`.",
              "2. Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng Figlet: `figlet = Figlet()`.",
              "3. L·∫•y danh s√°ch c√°c font: `font_list = figlet.getFonts()`.",
              "4. Ki·ªÉm tra ƒë·ªô d√†i c·ªßa `sys.argv`. N·∫øu l√† 1 (kh√¥ng c√≥ ƒë·ªëi s·ªë), ch·ªçn m·ªôt font ng·∫´u nhi√™n.",
              "5. N·∫øu ƒë·ªô d√†i l√† 3 v√† ƒë·ªëi s·ªë ƒë·∫ßu ti√™n l√† `-f` ho·∫∑c `--font` v√† font c√≥ trong danh s√°ch, s·ª≠ d·ª•ng font ƒë√≥.",
              "6. N·∫øu kh√¥ng, tho√°t ch∆∞∆°ng tr√¨nh v·ªõi th√¥ng b√°o l·ªói.",
              "7. Y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p vƒÉn b·∫£n.",
              "8. ƒê·∫∑t font ƒë√£ ch·ªçn cho ƒë·ªëi t∆∞·ª£ng figlet: `figlet.setFont(font=chosen_font)`.",
              "9. In ra vƒÉn b·∫£n ƒë√£ ƒë∆∞·ª£c render."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "import sys\nimport random\nfrom pyfiglet import Figlet\n\nfiglet = Figlet()\nfonts = figlet.getFonts()\n\nif len(sys.argv) == 1:\n    font = random.choice(fonts)\nelif len(sys.argv) == 3 and (sys.argv[1] == \"-f\" or sys.argv[1] == \"--font\") and sys.argv[2] in fonts:\n    font = sys.argv[2]\nelse:\n    sys.exit(\"Invalid usage\")\n\ntext = input(\"Input: \")\nfiglet.setFont(font=font)\nprint(\"Output:\")\nprint(figlet.renderText(text))"
          }
        }
      },
      {
        "id": "game",
        "name": "Guessing Game",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "Ch∆∞∆°ng tr√¨nh c·∫ßn t·∫°o m·ªôt s·ªë ng·∫´u nhi√™n trong m·ªôt ph·∫°m vi v√† y√™u c·∫ßu ng∆∞·ªùi d√πng ƒëo√°n.",
              "L√†m th·∫ø n√†o ƒë·ªÉ nh·∫≠n m·ªôt s·ªë nguy√™n d∆∞∆°ng t·ª´ ng∆∞·ªùi d√πng v√† x·ª≠ l√Ω n·∫øu h·ªç nh·∫≠p sai?",
              "L√†m th·∫ø n√†o ƒë·ªÉ t·∫°o m·ªôt s·ªë nguy√™n ng·∫´u nhi√™n?",
              "V√≤ng l·∫∑p n√†o ph√π h·ª£p ƒë·ªÉ cho ph√©p ng∆∞·ªùi d√πng ƒëo√°n nhi·ªÅu l·∫ßn?"
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. S·ª≠ d·ª•ng m·ªôt v√≤ng l·∫∑p `while True` v√† `try/except` ƒë·ªÉ y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p m·ª©c ƒë·ªô (level) cho ƒë·∫øn khi nh·∫≠n ƒë∆∞·ª£c m·ªôt s·ªë nguy√™n d∆∞∆°ng.",
              "2. Sau khi c√≥ level, t·∫°o m·ªôt s·ªë ng·∫´u nhi√™n t·ª´ 1 ƒë·∫øn level b·∫±ng `random.randint(1, n)`.",
              "3. B·∫Øt ƒë·∫ßu m·ªôt v√≤ng l·∫∑p `while True` kh√°c ƒë·ªÉ ng∆∞·ªùi d√πng ƒëo√°n.",
              "4. B√™n trong v√≤ng l·∫∑p ƒëo√°n, s·ª≠ d·ª•ng `try/except` ƒë·ªÉ ƒë·∫£m b·∫£o ng∆∞·ªùi d√πng nh·∫≠p m·ªôt s·ªë nguy√™n.",
              "5. So s√°nh s·ªë ng∆∞·ªùi d√πng ƒëo√°n v·ªõi s·ªë ng·∫´u nhi√™n v√† in ra 'Too small!', 'Too large!', ho·∫∑c 'Just right!'.",
              "6. N·∫øu ƒëo√°n ƒë√∫ng, tho√°t kh·ªèi v√≤ng l·∫∑p."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "import random\n\nwhile True:\n    try:\n        level = int(input(\"Level: \"))\n        if level > 0:\n            break\n    except ValueError:\n        pass\n\ntarget = random.randint(1, level)\n\nwhile True:\n    try:\n        guess = int(input(\"Guess: \"))\n        if guess < target:\n            print(\"Too small!\")\n        elif guess > target:\n            print(\"Too large!\")\n        else:\n            print(\"Just right!\")\n            break\n    except ValueError:\n        pass"
          }
        }
      },
      {
        "id": "professor",
        "name": "Little Professor",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "ƒê√¢y l√† m·ªôt b√†i to√°n ph·ª©c t·∫°p h∆°n, ƒë√≤i h·ªèi ph·∫£i c·∫•u tr√∫c code th√†nh c√°c h√†m.",
              "H√†m `get_level` n√™n l√†m g√¨? N√≥ c·∫ßn ƒë·∫£m b·∫£o ng∆∞·ªùi d√πng nh·∫≠p 1, 2, ho·∫∑c 3.",
              "H√†m `generate_integer` n√™n l√†m g√¨? N√≥ ph·ª• thu·ªôc v√†o level ƒë√£ ch·ªçn.",
              "V√≤ng l·∫∑p ch√≠nh c·ªßa tr√≤ ch∆°i s·∫Ω nh∆∞ th·∫ø n√†o? N√≥ c·∫ßn t·∫°o 10 b√†i to√°n, cho ng∆∞·ªùi d√πng 3 l·∫ßn ƒëo√°n cho m·ªói b√†i, v√† theo d√µi ƒëi·ªÉm s·ªë."
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. `get_level`: D√πng `while True` v√† `try/except` ƒë·ªÉ nh·∫≠n level 1, 2, ho·∫∑c 3.",
              "2. `generate_integer`: D√πng `if/elif/else` d·ª±a tr√™n level ƒë·ªÉ tr·∫£ v·ªÅ m·ªôt s·ªë ng·∫´u nhi√™n c√≥ 1, 2, ho·∫∑c 3 ch·ªØ s·ªë.",
              "3. `main`: G·ªçi `get_level`. Kh·ªüi t·∫°o `score = 0`. B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p `for _ in range(10)`.",
              "4. Trong v√≤ng l·∫∑p ch√≠nh, g·ªçi `generate_integer` hai l·∫ßn ƒë·ªÉ c√≥ `x` v√† `y`. Kh·ªüi t·∫°o `tries = 0`.",
              "5. B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p `while tries < 3`. Y√™u c·∫ßu ng∆∞·ªùi d√πng tr·∫£ l·ªùi.",
              "6. N·∫øu c√¢u tr·∫£ l·ªùi ƒë√∫ng, tƒÉng `score` v√† `break`. N·∫øu sai, in 'EEE' v√† tƒÉng `tries`.",
              "7. N·∫øu h·∫øt 3 l·∫ßn th·ª≠, in ra ƒë√°p √°n ƒë√∫ng.",
              "8. Sau v√≤ng l·∫∑p ch√≠nh, in ƒëi·ªÉm cu·ªëi c√πng."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "import random\n\ndef main():\n    level = get_level()\n    score = 0\n    for _ in range(10):\n        x = generate_integer(level)\n        y = generate_integer(level)\n        # ... logic cho 3 l·∫ßn th·ª≠ ...\n    print(f\"Score: {score}\")\n\ndef get_level():\n    # ... logic nh·∫≠n level 1, 2, 3 ...\n\ndef generate_integer(level):\n    if level == 1:\n        return random.randint(0, 9)\n    # ... logic cho level 2, 3 ...\n\nif __name__ == \"__main__\":\n    main()"
          }
        }
      },
      {
        "id": "bitcoin",
        "name": "Bitcoin Price Index",
        "hints": {
          "level1": {
            "title": "G·ª£i √Ω T∆∞ duy",
            "content": [
              "B·∫°n c·∫ßn l·∫•y gi√° Bitcoin hi·ªán t·∫°i t·ª´ m·ªôt API c√¥ng khai.",
              "L√†m th·∫ø n√†o ƒë·ªÉ x·ª≠ l√Ω c√°c ƒë·ªëi s·ªë d√≤ng l·ªánh ƒë·ªÉ nh·∫≠n s·ªë l∆∞·ª£ng Bitcoin?",
              "Th∆∞ vi·ªán `requests` d√πng ƒë·ªÉ g·ª≠i y√™u c·∫ßu HTTP ƒë·∫øn API. C·∫ßn x·ª≠ l√Ω c√°c l·ªói c√≥ th·ªÉ x·∫£y ra khi g·ª≠i y√™u c·∫ßu.",
              "API tr·∫£ v·ªÅ d·ªØ li·ªáu ·ªü ƒë·ªãnh d·∫°ng JSON. L√†m th·∫ø n√†o ƒë·ªÉ ph√¢n t√≠ch c√∫ ph√°p (parse) d·ªØ li·ªáu n√†y trong Python?",
              "Sau khi c√≥ gi√° m·ªói Bitcoin v√† s·ªë l∆∞·ª£ng Bitcoin, ph√©p t√≠nh cu·ªëi c√πng l√† g√¨?"
            ]
          },
          "level2": {
            "title": "C√°c B∆∞·ªõc Logic",
            "content": [
              "1. Ki·ªÉm tra `sys.argv` ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ƒë√∫ng m·ªôt ƒë·ªëi s·ªë v√† n√≥ l√† m·ªôt s·ªë.",
              "2. G·ª≠i y√™u c·∫ßu GET ƒë·∫øn API c·ªßa CoinDesk b·∫±ng `requests.get()`. ƒê·∫∑t n√≥ trong kh·ªëi `try/except` ƒë·ªÉ x·ª≠ l√Ω `requests.RequestException`.",
              "3. Ph√¢n t√≠ch c√∫ ph√°p ph·∫£n h·ªìi JSON b·∫±ng `.json()`.",
              "4. Tr√≠ch xu·∫•t gi√° Bitcoin (rate_float) t·ª´ c·∫•u tr√∫c JSON l·ªìng nhau.",
              "5. Nh√¢n gi√° n√†y v·ªõi s·ªë l∆∞·ª£ng Bitcoin t·ª´ ƒë·ªëi s·ªë d√≤ng l·ªánh.",
              "6. In ra t·ªïng chi ph√≠ ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng."
            ]
          },
          "level3": {
            "title": "Code Skeleton",
            "content": "import requests\nimport sys\n\nif len(sys.argv) != 2:\n    sys.exit(\"Missing command-line argument\")\n\ntry:\n    btc_amount = float(sys.argv[1])\nexcept ValueError:\n    sys.exit(\"Command-line argument is not a number\")\n\ntry:\n    response = requests.get(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n    data = response.json()\n    btc_price = data[\"bpi\"][\"USD\"][\"rate_float\"]\n    total_cost = btc_amount * btc_price\n    print(f\"${total_cost:,.4f}\")\nexcept requests.RequestException:\n    sys.exit(\"Request failed\")"
          }
        }
      }
    ]
  }
  